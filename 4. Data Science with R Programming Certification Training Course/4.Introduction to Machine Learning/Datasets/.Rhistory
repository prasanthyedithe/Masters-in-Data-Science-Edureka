getwd()
setwd(choose.dir())
getwd()
df = read.csv("video_game.csv")
view(df)
View(df)
# creating a sample diving into the ratio of 60:40
sample <- sample.split(data_frame$col2, SplitRatio = 0.6)
print ("Training Dataset")
library("caTools")
install.packages("caTools")
library("dplyr")
install.packages("dplyr")
library("dplyr")
library("caTools")
library("dplyr")
# creating a sample diving into the ratio of 60:40
sample <- sample.split(data_frame$col2, SplitRatio = 0.6)
print ("Training Dataset")
training_dataset  <- data_frame %>% dplyr::sample_frac(0.7)
data_frame = read.csv("video_game.csv")
View(data_frame)
print ("Training Dataset")
training_dataset  <- data_frame %>% dplyr::sample_frac(0.7)
print (training_dataset)
print ("Testing Dataset")
print ("Testing Dataset")
testing_dataset   <- dplyr::anti_join(data_frame,
training_dataset, by = 'EU_players')
print (testing_dataset)
install.packages('caTools')
install.packages("caTools")
relation <- lm(training_dataset~testing_dataset)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("broom")
install.packages("broom")
library("dplyr")
library("caTools")
library(ggplot2)
library(dplyr)
library(broom)
library(ggpubr)
summary(data_frame)
summary(data_frame.data)
#Simple regression
plot(Year_of_Release ~ EU_players, data = data_frame)
year.euplayer.lm <- lm(Year_of_Release ~ EU_players, data = data_frame)
year.euplayer.lm <- lm(Year_of_Release ~ NA_players, data = data_frame)
year.euplayer.lm <- lm(Year_of_Release ~ User_Score, data = data_frame)
na.omit(data_frame)
print ("Training Dataset")
training_dataset  <- data_frame %>% dplyr::sample_frac(0.7)
print (training_dataset)
print ("Testing Dataset")
testing_dataset   <- dplyr::anti_join(data_frame,
training_dataset, by = 'EU_players')
print (testing_dataset)
#Simple regression
plot(Year_of_Release ~ EU_players, data = data_frame) #Linearity
year.euplayer.lm <- lm(Year_of_Release ~ User_Score, data = data_frame)
data_frame[is.na(data_frame) | data_frame=="Inf"] = NA
na.omit(data_frame)
#Simple regression
plot(Year_of_Release ~ EU_players, data = data_frame) #Linearity
year.euplayer.lm <- lm(Year_of_Release ~ User_Score, data = data_frame)
summary(year.euplayer.lm)
lm(formula = Year_of_Release ~ EU_players, data = data_frame)
#Simple regression
plot(Critic_Score ~ Critic_Count, data = data_frame) #Linearity
lm(formula = Critic_Score ~ Critic_Count, data = data_frame)
year.euplayer.lm <- lm(Critic_Score ~ Critic_Count, data = data_frame)
summary(year.euplayer.lm)
###########Logistic Regression##################
df = read.csv("Employee_Data.csv")
View(df)
summarise(df)
summarise(df)
###########Logistic Regression##################
df = read.csv("Employee_Data.csv")
View(df)
summarise(df)
summary(df)
install.packages("ROCR")
library(ROCR)
# Splitting dataset
split <- sample.split(df, SplitRatio = 0.8)
split
train_reg <- subset(df, split == "TRUE")
test_reg <- subset(df, split == "FALSE")
summary(mtcars)
View(mtcars)
# Training model
logistic_model <- glm(vs ~ wt + disp,
data = train_reg,
family = "binomial")
summary(df)
# Training model
logistic_model <- glm(Age_Of_emp ~ Emp_Sal + disp,
data = train_reg,
family = "binomial")
# Training model
logistic_model <- glm(Age_Of_emp ~ Emp_Sal,
data = train_reg,
family = "binomial")
summary(df)
df[df$sex == 1] <- "Male"
df[df$sex == 0] <- "Female"
# Splitting dataset
split <- sample.split(df, SplitRatio = 0.8)
split
train_reg <- subset(df, split == "TRUE")
test_reg <- subset(df, split == "FALSE")
df[df$sex_of_emp == 1] <- "Male"
df[df$sex_of_emp == 0] <- "Female"
View(df)
df$sex_of_emp[df$sex_of_emp == 1] <- "Male"
df$sex_of_emp[df$sex_of_emp == 0] <- "Female"
View(df)
df$sex_of_emp<-ifelse(df$sex_of_emp=="Male",1,0)
View(df)
# Splitting dataset
split <- sample.split(df, SplitRatio = 0.8)
split
train_reg <- subset(df, split == "TRUE")
test_reg <- subset(df, split == "FALSE")
# Training model
logistic_model <- glm(sex_of_emp ~ Emp_Sal,
data = train_reg,
family = "binomial")
logistic_model
# Summary
summary(logistic_model)
# Predict test data based on model
predict_reg <- predict(logistic_model,
test_reg, type = "response")
predict_reg
# Changing probabilities
predict_reg <- ifelse(predict_reg >0.5, 1, 0)
# Evaluating model accuracy
# using confusion matrix
table(test_reg$Emp_Sal, predict_reg)
missing_classerr <- mean(predict_reg != test_reg$Emp_Sal)
print(paste('Accuracy =', 1 - missing_classerr))
# Changing probabilities
predict_reg <- ifelse(predict_reg >0.4, 1, 0)
# Evaluating model accuracy
# using confusion matrix
table(test_reg$Emp_Sal, predict_reg)
missing_classerr <- mean(predict_reg != test_reg$Emp_Sal)
print(paste('Accuracy =', 1 - missing_classerr))
