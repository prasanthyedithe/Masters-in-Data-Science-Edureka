x = 1
x
runif(1)
runif(3, min=1, max=10)
#Generating 3 Random numbers with mean and stand.dev
rnorm(3, mean=5, sd=1)
#Generating 3 Random numbers with mean and stand.dev
Random = rnorm(3, mean=5, sd=1)
Random
#Generating 3 Random numbers with mean and stand.dev
Random1 = rnorm(3, mean=5, sd=1)
Random1
#Generating 3 Random numbers with mean and stand.dev
Random_Set1 = rnorm(3, mean=5, sd=1)
Random_Set1
#Generating 3 Random numbers with mean and stand.dev
Random_Set1 = rnorm(3, mean=5, sd=1)
Random_Set1
Random_Set2 = rnorm(3, mean=3, sd=3)
Random_Set2
Random_Set3 = rnorm(4, mean=1, sd=4)
Random_Set3
Random_Set1 + Random_Set2 + Random_Set3
c(Random_Set1 + Random_Set2 + Random_Set3)
class(Random_Set1)
paste(c((Random_Set1 , Random_Set2 , Random_Set3)),collapse="")
paste(c(Random_Set1,Random_Set2,Random_Set3),collapse=""))
paste(c(Random_Set1,Random_Set2,Random_Set3),collapse="")
paste(c(Random_Set1,Random_Set2,Random_Set3),collapse=" ")
Random = paste(c(Random_Set1,Random_Set2,Random_Set3),collapse=" ")
Random
log(1)
log(2)
log_values = c(log(1),log(2),log(3),log(4),(log5))
log_values = c(log(1),log(2),log(3),log(4),log(5))
log_values
exp(6)
exp(7)
LogExpo = c(log(1),log(2),log(3),log(4),log(5),exp(6),exp(7),exp(8),exp(9),exp(10))
LogExpo
Negative_thousand = seq(-1000,0)
Thousand =  seq(0,1000)
Negative_thousand + Thousand
Final_Thousand = Negative_thousand + Thousand
#4
Final_Thousand[500]
First_Hundred = Final_Thousand[1:100]
Last_Hundred = Final_Thousand[-5]
Last_Hundred
Last_Hundred = tail(Final_Thousand,100)
Last_Hundred
Weird_Set = Final_Thousand[321:764]
Weird_Set
Book_Details <- list(Book_Name=c("Java First","Python","Learn C++","JavaScript for Beginners"),
Author_Name=c("David","Jogn","Michel","James"),
Book_Cost=c(150,140,400,500))
Book_Details
Book_Details <- list(Book_Name=c("Java First","Python","Learn C++","JavaScript for Beginners","PMP"),
Author_Name=c("David","Jogn","Michel","James","James John"),
Book_Cost=c(150,140,400,500,600))
Book_Details
#6
Book_Details[[1]][1]
#6
Book_Details[1]
Book_Details[1]
Book_Details[2]
Book_Details[3]
Book_Details[[1]][4]
Book_Details[[2]][2]
Book_Details[[3]][5]
Negative_thousand = seq(-1000,0)
Thousand =  seq(0,1000)
Final_Thousand = Negative_thousand + Thousand
Final_Thousand
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
data(women)
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
data.women = data(women)
data.women
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
data(women)
if(!require('utils')) {
install.packages('utils')
library('utils')
}
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
view(women)
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
views(women)
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
View(women)
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
data()
women_data = View(women)
class(women_data)
class(women_data)
#Extract the observation which is present at 6th row, 2nd column
women_data[1:2,]
data()
women_data = View(women)
class(women_data)
#Extract the observation which is present at 6th row, 2nd column
women_data[1:2,]
class(women_data)
women_data = View(women)
class(women_data)
class(women)
women_data[1,2]
women[1:2,]
#Extract the observation which is present at 6th row, 2nd column
women[6,2]
#Extract the last four rows of the data-set
last_row = tail(women, n =4)
last_row
#Extract alternate rows from the data-set
row_odd <- seq_len(nrow(women)) %% 2              # Create row indicator
row_odd
#Extract alternate rows from the data-set
data_row_even <- women[row_odd == 0, ]            # Subset even rows
data_row_even
#Extract alternate rows from the data-set
data_row_even <- women[row_odd == 1, ]            # Subset even rows
data_row_even
First_Hundred <- (1:10)
for (e in First_Hundred){
e
}
for (e in First_Hundred){
print(e)
}
First_Hundred <- (1:10)
v <- c()
for (e in First_Hundred){
v[e] <- e
}
print(v)
print(v[1:5])
for (e in First_Hundred){
if(e %% 2 == 1){
v[e] <- "ODD"
}else{
v[e] <- "EVEN"
}
}
print(v[1:5])
View(iris$Sepal.Length)
Sepal_Length = View(iris$Sepal.Length)
Sepal_Length
Sepal_Length = iris$Sepal.Length
class(Sepal_Length)
Sepal_Length
len(Sepal_Length)
Sepal_Length = iris$Sepal.Length
for(e in Sepal_Length){
if(e > 6.5){
print(e+ " is Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
v1 <- e
print(v1+"Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
v1 <- e
print("Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
past(e,"Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
past(e+" Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
paste(e+" Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
paste(e," Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
print(paste(e," Grether than 6.5"))
}
}
View(CO2)
install.packages("dplyr")
install.packages("purrr")
library(dplyr)
library(purrr)
library(dplyr)
First_Hundred <- (1:10)
library(dplyr)
library(purrr)
co2_selected_value = CO2[CO2$Type == 'Mississippi' & CO2$Treatment == "chilled",]
co2_selected_value
mean(co2_selected_value$uptake)
tapply(CO2$uptake, CO2$Treatment, mean)
tapply(CO2$uptake, CO2$Treatment, median)
tapply(CO2$uptake, CO2$Treatment, min)
tapply(CO2$uptake, CO2$Treatment, max)
invoke_map(list(Min_Fertility="min",Max_Mortality="max"),list(swiss$Fertility,swiss$Infant.Mortality))
print(Min_Fertility)
invoke_map(list(Min_Fertility="min",Max_Mortality="max"),list(swiss$Fertility,swiss$Infant.Mortality))
dice <- function(){
runif(1, min=1, max=6)
}
dice()
dice()
install.packages("R6")
library(R6)
Football_Generator <-R6Class("Foodball",
private=list(name=NA,club=NA,salary=NA),
public=list(
set_name=function(x){private$name<-x},
set_club=function(x){private$club<-x},
set_salary=function(x){private$salary<-x},
)
)
Football_Generator <-R6Class("Foodball",
private=list(name=NA,club=NA,salary=NA),
public=list(
set_name=function(x){private$name<-x},
set_club=function(x){private$club<-x},
set_salary=function(x){private$salary<-x}
)
)
Team1 <- Football_Generator$new()
asis_team <- Football_Generator$new()
teams <- Football_Generator$new()
teams$set_name("Asia Team")
teams$set_club("Hyderabad CLub")
teams$set_salary(50000)
teams
Football_Generator <-R6Class("Foodball",
private=list(Player_Club=NA,Player_Club=NA,Player_Salary=NA),
public=list(
set_name=function(x){private$Player_Club<-x},
set_club=function(x){private$Player_Club<-x},
set_salary=function(x){private$Player_Salary<-x}
)
)
Football_Generator <-R6Class("Foodball",
private=list(name=NA,club=NA,salary=NA),
public=list(
set_name=function(x){private$name<-x},
set_club=function(x){private$club<-x},
set_salary=function(x){private$salary<-x}
)
)
Movie_Generator <-R6Class("Movie",
private = list(moviewname=NA,protagonistname-NA,moviebudget=NA)
)
Movie_Generator <-R6Class("Movie",
private = list(moviewname=NA,protagonistname=NA,moviebudget=NA)
)
Movie_Generator <-R6Class("Movie",
private = list(moviename=NA,protagonistname=NA,moviebudget=NA),
public = list(
initialize = function(x,y,z){
private$moviename<-x
private$protagonistname=y
provate$moviebudget=z
}
)
)
movie <- Movie_Generator$new()
movie <- Movie_Generator$new("Check De India","Test",100)
Movie_Generator <-R6Class("Movie",
private = list(moviename=NA,protagonistname=NA,moviebudget=NA),
public = list(
initialize = function(x,y,z){
private$moviename<-x
private$protagonistname=y
private$moviebudget=z
}
)
)
movie <- Movie_Generator$new("Check De India","Test",100)
movie
Vegetable_Generator <- R6Class("Vegetable",
private = list(name=NA,cost=NA)
)
Vegetable_Generator <- R6Class("Vegetable",
private = list(..name=NA,..cost=NA),
active = list(
name=function(x){private$..name<-x},
cost=function(x){private$..cost<x}
)
)
vegetable = Vegetable_Generator$new()
vegetable = Vegetable_Generator$new()
vegetable$name <- "Carrot"
vegetable$cost <- 100
vegetable
Vegetable_Generator <- R6Class("Vegetable",
private = list(..name=NA,..cost=NA),
active = list(
name=function(x){private$..name<-x},
cost=function(x){private$..cost<-x}
)
)
vegetable = Vegetable_Generator$new()
vegetable$name <- "Carrot"
vegetable$cost <- 100
vegetable
employee_designation = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Designation=c("CTO","CEO","SDE","COO","Analyst")
employee_salary = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
employee_designation = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Designation=c("CTO","CEO","SDE","COO","Analyst"))
employee_salary = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Salary=c(78903,89000,6500,73456,56983))
employee_salary = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Salary=c(78903,89000,6500,73456,56983))
left_join(employee_designation,employee_salary,by="Name")
install.packages('dplyr')
library(dplyr)
left_join(employee_designation,employee_salary,by="Name")
right_join(employee_salary,employee_designation,by="Name")
employee_designation = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne","Prasanth"),
Designation=c("CTO","CEO","SDE","COO","Analyst","TPM"))
left_join(employee_designation,employee_salary,by="Name")
right_join(employee_salary,employee_designation,by="Name")
inner_join(employee_designation,employee_salary,by="Name")
full_join(employee_designation,employee_salary,by="Name")
library(data.table)
install.packages("data.table")
library(data.table)
install.packages("data.table")
#install.packages("data.table")
library(data.table)
view(iris)
View(iris)
as.data.table(iris) -> iris.dt
iris.dt[1:2]
iris.dt[2:6]
iris.dt[Sepal.Length>5]
library(dplyr)
housing = read.csv("housingdata.csv")
housing = read.csv("housingdata.csv")
head(housing)
summary(housing)
names(housing)
str(housing)
as_tibble(housing)->housing
Select
select(housing, Gender, Education, Income)
sessionInfo()
install.packages("AER")
library(AER)
library(AER)
library(AER)
data("Affairs")
View("Affairs")
install.packages("AER")
install.packages("AER")
install.packages("randomForest")
install.packages("rpart")
install.packages("caret")
install.packages("dplyr")
library(AER)
library(randomForest)
library(rpart)
library(caret)
library(ggplot2)
library(dplyr)
data("Affairs")
View("Affairs")
setwd(choose.dir())
production <- read.csv('M9_Monthly_Milkproduction.csv')
milk.ts <- ts(production$Milk.Prod, start=1995, freq=12)
CADairyProduction.csv
getwd()
production <- read.csv('CADairyProduction.csv')
milk.ts <- ts(production$Milk.Prod, start=1995, freq=12)
plot(log(milk.ts), main='Milk Production Time Series', ylab='Log of Milk Production')
