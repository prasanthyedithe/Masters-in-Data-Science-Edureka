#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
view(women)
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
views(women)
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
View(women)
#7 Load the inbuilt data-set “women” by using the “data()” command. From this data-set
data()
women_data = View(women)
class(women_data)
class(women_data)
#Extract the observation which is present at 6th row, 2nd column
women_data[1:2,]
data()
women_data = View(women)
class(women_data)
#Extract the observation which is present at 6th row, 2nd column
women_data[1:2,]
class(women_data)
women_data = View(women)
class(women_data)
class(women)
women_data[1,2]
women[1:2,]
#Extract the observation which is present at 6th row, 2nd column
women[6,2]
#Extract the last four rows of the data-set
last_row = tail(women, n =4)
last_row
#Extract alternate rows from the data-set
row_odd <- seq_len(nrow(women)) %% 2              # Create row indicator
row_odd
#Extract alternate rows from the data-set
data_row_even <- women[row_odd == 0, ]            # Subset even rows
data_row_even
#Extract alternate rows from the data-set
data_row_even <- women[row_odd == 1, ]            # Subset even rows
data_row_even
First_Hundred <- (1:10)
for (e in First_Hundred){
e
}
for (e in First_Hundred){
print(e)
}
First_Hundred <- (1:10)
v <- c()
for (e in First_Hundred){
v[e] <- e
}
print(v)
print(v[1:5])
for (e in First_Hundred){
if(e %% 2 == 1){
v[e] <- "ODD"
}else{
v[e] <- "EVEN"
}
}
print(v[1:5])
View(iris$Sepal.Length)
Sepal_Length = View(iris$Sepal.Length)
Sepal_Length
Sepal_Length = iris$Sepal.Length
class(Sepal_Length)
Sepal_Length
len(Sepal_Length)
Sepal_Length = iris$Sepal.Length
for(e in Sepal_Length){
if(e > 6.5){
print(e+ " is Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
v1 <- e
print(v1+"Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
v1 <- e
print("Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
past(e,"Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
past(e+" Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
paste(e+" Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
paste(e," Grether than 6.5")
}
}
for(e in Sepal_Length){
if(e > 6.5){
print(paste(e," Grether than 6.5"))
}
}
View(CO2)
install.packages("dplyr")
install.packages("purrr")
library(dplyr)
library(purrr)
library(dplyr)
First_Hundred <- (1:10)
library(dplyr)
library(purrr)
co2_selected_value = CO2[CO2$Type == 'Mississippi' & CO2$Treatment == "chilled",]
co2_selected_value
mean(co2_selected_value$uptake)
tapply(CO2$uptake, CO2$Treatment, mean)
tapply(CO2$uptake, CO2$Treatment, median)
tapply(CO2$uptake, CO2$Treatment, min)
tapply(CO2$uptake, CO2$Treatment, max)
invoke_map(list(Min_Fertility="min",Max_Mortality="max"),list(swiss$Fertility,swiss$Infant.Mortality))
print(Min_Fertility)
invoke_map(list(Min_Fertility="min",Max_Mortality="max"),list(swiss$Fertility,swiss$Infant.Mortality))
dice <- function(){
runif(1, min=1, max=6)
}
dice()
dice()
install.packages("R6")
library(R6)
Football_Generator <-R6Class("Foodball",
private=list(name=NA,club=NA,salary=NA),
public=list(
set_name=function(x){private$name<-x},
set_club=function(x){private$club<-x},
set_salary=function(x){private$salary<-x},
)
)
Football_Generator <-R6Class("Foodball",
private=list(name=NA,club=NA,salary=NA),
public=list(
set_name=function(x){private$name<-x},
set_club=function(x){private$club<-x},
set_salary=function(x){private$salary<-x}
)
)
Team1 <- Football_Generator$new()
asis_team <- Football_Generator$new()
teams <- Football_Generator$new()
teams$set_name("Asia Team")
teams$set_club("Hyderabad CLub")
teams$set_salary(50000)
teams
Football_Generator <-R6Class("Foodball",
private=list(Player_Club=NA,Player_Club=NA,Player_Salary=NA),
public=list(
set_name=function(x){private$Player_Club<-x},
set_club=function(x){private$Player_Club<-x},
set_salary=function(x){private$Player_Salary<-x}
)
)
Football_Generator <-R6Class("Foodball",
private=list(name=NA,club=NA,salary=NA),
public=list(
set_name=function(x){private$name<-x},
set_club=function(x){private$club<-x},
set_salary=function(x){private$salary<-x}
)
)
Movie_Generator <-R6Class("Movie",
private = list(moviewname=NA,protagonistname-NA,moviebudget=NA)
)
Movie_Generator <-R6Class("Movie",
private = list(moviewname=NA,protagonistname=NA,moviebudget=NA)
)
Movie_Generator <-R6Class("Movie",
private = list(moviename=NA,protagonistname=NA,moviebudget=NA),
public = list(
initialize = function(x,y,z){
private$moviename<-x
private$protagonistname=y
provate$moviebudget=z
}
)
)
movie <- Movie_Generator$new()
movie <- Movie_Generator$new("Check De India","Test",100)
Movie_Generator <-R6Class("Movie",
private = list(moviename=NA,protagonistname=NA,moviebudget=NA),
public = list(
initialize = function(x,y,z){
private$moviename<-x
private$protagonistname=y
private$moviebudget=z
}
)
)
movie <- Movie_Generator$new("Check De India","Test",100)
movie
Vegetable_Generator <- R6Class("Vegetable",
private = list(name=NA,cost=NA)
)
Vegetable_Generator <- R6Class("Vegetable",
private = list(..name=NA,..cost=NA),
active = list(
name=function(x){private$..name<-x},
cost=function(x){private$..cost<x}
)
)
vegetable = Vegetable_Generator$new()
vegetable = Vegetable_Generator$new()
vegetable$name <- "Carrot"
vegetable$cost <- 100
vegetable
Vegetable_Generator <- R6Class("Vegetable",
private = list(..name=NA,..cost=NA),
active = list(
name=function(x){private$..name<-x},
cost=function(x){private$..cost<-x}
)
)
vegetable = Vegetable_Generator$new()
vegetable$name <- "Carrot"
vegetable$cost <- 100
vegetable
employee_designation = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Designation=c("CTO","CEO","SDE","COO","Analyst")
employee_salary = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
employee_designation = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Designation=c("CTO","CEO","SDE","COO","Analyst"))
employee_salary = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Salary=c(78903,89000,6500,73456,56983))
employee_salary = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne"),
Salary=c(78903,89000,6500,73456,56983))
left_join(employee_designation,employee_salary,by="Name")
install.packages('dplyr')
library(dplyr)
left_join(employee_designation,employee_salary,by="Name")
right_join(employee_salary,employee_designation,by="Name")
employee_designation = data.frame(Name=c("Jhon","Sam","Raj","Amy","Anne","Prasanth"),
Designation=c("CTO","CEO","SDE","COO","Analyst","TPM"))
left_join(employee_designation,employee_salary,by="Name")
right_join(employee_salary,employee_designation,by="Name")
inner_join(employee_designation,employee_salary,by="Name")
full_join(employee_designation,employee_salary,by="Name")
library(data.table)
install.packages("data.table")
library(data.table)
install.packages("data.table")
#install.packages("data.table")
library(data.table)
view(iris)
View(iris)
as.data.table(iris) -> iris.dt
iris.dt[1:2]
iris.dt[2:6]
iris.dt[Sepal.Length>5]
library(dplyr)
housing = read.csv("housingdata.csv")
housing = read.csv("housingdata.csv")
head(housing)
summary(housing)
names(housing)
str(housing)
as_tibble(housing)->housing
Select
select(housing, Gender, Education, Income)
sessionInfo()
install.packages("AER")
library(AER)
library(AER)
library(AER)
data("Affairs")
View("Affairs")
install.packages("AER")
install.packages("AER")
install.packages("randomForest")
install.packages("rpart")
install.packages("caret")
install.packages("dplyr")
library(AER)
library(randomForest)
library(rpart)
library(caret)
library(ggplot2)
library(dplyr)
data("Affairs")
View("Affairs")
install.packages("plyr")
install.packages("ggplot2")
install.packages("rcolorbrewer")
install.packages("RColorBrewer")
# Loading package
library(plyr)
library(ggplot2)
library(RColorBrewer)
A = 22
B = 34
C = 102
vec = c(A,B,C)
mean(vec)
install.packages("DAAG")
library(DAAG)
install.packages("DAAG")
install.packages("DAAG")
library(DAAG)
# Module-2
data(jobs)
head(jobs)
df = data.frame(jobs$BC,jobs$Alberta)
df
# Module-3
jobs[jobs<quantile(jobs$Atlantic,0.75),]
# Module-3
jobs[jobs$Atlantic<quantile(jobs$Atlantic,0.75),]
# Module-3
jobs$Atlantic[jobs$Atlantic<quantile(jobs$Atlantic,0.75),]
# Module-3
jobs[jobs$Atlantic<quantile(jobs$Atlantic,950),]
# Module-3
jobs[jobs$Atlantic< 950]
# Module-3
jobs[jobs$Atlantic < 950,]
# Module-4
# Module-5
order(jobs$Quebec, na.last = TRUE, decreasing = FALSE)
# Module-3
data(VADeaths)
head(VADeaths)
mean(VADeaths$Rural Female)
mean(VADeaths["Rural Female"])
head(mtcars)
lapply(mtcars, toupper)
sapply(mtcars, max)
apply(mtcars, mean)
# Installing Packages
install.packages("arules")
install.packages("arulesViz")
# Loading package
library(arules)
library(arulesViz)
library(recommenderlab)
install.packages("recommenderlab")
install.packages("ggplot2")
install.packages("data.table")
install.packages("reshape2")
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
setwd(choose.dir())
getwd()
install.packages("datasets.load")
install.packages("caTools")
install.packages("party")
install.packages("dplyr")
install.packages("magrittr")
library(data.table)
library(reshape2)
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
df <- read.csv("338_cert_proj_datasets_v3.0.csv")
df <- read.csv("338_cert_proj_datasets_v3.0.csv")
head(df)
sample_data = sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, sample_data == TRUE)
test_data <- subset(df, sample_data == FALSE)
model<- ctree(df$department ~ ., train_data)
model<- ctree(df$salary ~ ., train_data)
model<- ctree(df$left ~ ., train_data)
plot(model)
data("readingSkills")
head(readingSkills)
sample_data = sample.split(readingSkills, SplitRatio = 0.8)
train_data <- subset(readingSkills, sample_data == TRUE)
test_data <- subset(readingSkills, sample_data == FALSE)
model<- ctree(nativeSpeaker ~ ., train_data)
plot(model)
unique(df$left)
unique(df$salary)
mapvalues(df, from = c("low", "medium","high"), to = c(0,1,2))
library(plyr)
install.packages("plyr")
mapvalues(df, from = c("low", "medium","high"), to = c(0,1,2))
head(df[:,:-1])
head(df[:-1])
df2 <- subset(df, select = -c(df$salary, df$department))
df2 <- subset(df, select = -c("salary", "department"))
df2 <- df %>% select(-c("salary", "department"))
head(df)
df2 <- df[,-c(8,9)]
head(df2)
df2 <- df[,-c(9,10)]
head(df2)
sample_data = sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, sample_data == TRUE)
test_data <- subset(df, sample_data == FALSE)
model<- ctree(df$left ~ ., train_data)
install.packages("partykit")
library(partykit)
model<- ctree(df$left ~ ., train_data)
sample_data = sample.split(df, SplitRatio = 0.8)
# Installing Packages
install.packages("arules")
# Installing Packages
install.packages("arules")
install.packages("arulesViz")
# Loading package
library(arules)
library(arulesViz)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
library(plyr)
library(partykit)
setwd(choose.dir())
getwd()
df <- read.csv("338_cert_proj_datasets_v3.0.csv")
head(df)
df2 <- df[,-c(9,10)]
head(df2)
sample_data = sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, sample_data == TRUE)
test_data <- subset(df, sample_data == FALSE)
model<- ctree(df$left ~ ., train_data)
# Loading package
library(arules)
library(arulesViz)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
library(plyr)
library(partykit)
setwd(choose.dir())
getwd()
df <- read.csv("338_cert_proj_datasets_v3.0.csv")
head(df)
df2 <- df[,-c(9,10)]
head(df2)
sample_data = sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, sample_data == TRUE)
test_data <- subset(df, sample_data == FALSE)
model<- ctree(df$left ~ ., train_data)
plot(model)
str(df2)
sample_data = sample.split(df2, SplitRatio = 0.8)
train_data <- subset(df2, sample_data == TRUE)
test_data <- subset(df2, sample_data == FALSE)
model<- ctree(df2$left ~ ., train_data)
plot(model)
install.packages("arulesViz")
install.packages("arulesViz")
install.packages("caret")
library(caTools)
library(caret)
# Splitting data into train
# and test data
split <- sample.split(df, SplitRatio = 0.7)
train_cl <- subset(df, split == "TRUE")
test_cl <- subset(df, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
data(iris)
head(iris)
classifier_cl <- naiveBayes(df$salary ~ ., data = train_cl)
install.packages("naivebayes")
library(naiveBayes)
library(naivebayes)
classifier_cl <- naivebayes(df$salary ~ ., data = train_cl)
classifier_cl
install.packages("rminer")
library(rminer)
classifier_cl <- naivebayes(df$salary ~ ., data = train_cl)
library(e1071)
classifier_cl <- naivebayes(df$salary ~ ., data = train_cl)
classifier_cl <- naiveBayes(df$salary ~ ., data = train_cl)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
#############Classifying data using Support Vector Machines(SVMs) in R
head(df)
dataset = df[:8]
dataset = df[0:8]
head(dataset)
install.packages("ElemStatLearn")
# installing library ElemStatLearn
library(ElemStatLearn)
